/**
 Copyright 2022-2023 PrimeQA Team

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

syntax = "proto3";
import "parameter.proto";

package reader;

/**
   The service for getting readers and answer(s) to a question usign readers
*/
service ReadingService {
    rpc GetReaders (GetReadersRequest) returns (GetReadersResponse);
    rpc GetAnswers (GetAnswersRequest) returns (GetAnswersResponse);
}

message Reader {
    string reader_id = 1;
    repeated parameter.Parameter parameters = 2;
}

message GetReadersRequest {
}

message GetReadersResponse {
    repeated Reader readers = 1;
}

/**
    Given a pair of question and one or more context texts, returns up to max_num_answers answers
    for each context text.
*/
message GetAnswersRequest {
    Reader reader = 1;
    repeated string queries = 2;
    repeated Contexts contexts = 3;
}

message Contexts {
    repeated string texts = 1;
}

message Answer {
    string text = 1;
    double confidence_score = 2;
    optional uint32 context_index = 3;
    optional uint32 start_char_offset = 4;
    optional uint32 end_char_offset = 5;
};

message AnswersForContext {
    repeated Answer answers = 1;
}

message PerQueryResponse {
    string question_type_prediction = 1;
    string boolean_answer_prediction = 2;
}

message AnswersForQuery {
    repeated AnswersForContext context_answers = 1;
    repeated PerQueryResponse per_query_response = 2;    
}

/**
    An answer or answers to a question containing the text,
    byte/token offsets, score and source passage index for each answer.
*/
message GetAnswersResponse {
    repeated AnswersForQuery query_answers = 1;
}